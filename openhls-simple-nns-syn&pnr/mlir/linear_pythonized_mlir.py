import numpy as np
from openhls.ir.memref import MemRef, GlobalMemRef
from openhls.ir.ops import FMAC, ReduceAdd, Copy, SelfCopy, ReduceTiling, Div, Sqrt
from openhls.compiler.runner import parfor, Forward, make_output_file
import os

make_output_file(os.getenv("RUNNER_OUTPUT_FP") or __file__)



 # fmt: off
__constant_11x11xf32 = np.array([1.576385e-01, -1.461850e-01, 4.934788e-02, -1.429983e-02, 1.693715e-01, -2.409347e-01, -1.779356e-01, -1.671400e-01, 1.039190e-01, -2.519541e-01, 1.540605e-01, 1.391728e-01, 2.526919e-01, -1.372477e-01, -2.978266e-01, 2.953767e-01, -2.760251e-01, 2.987897e-01, 1.039158e-01, 4.500446e-02, -2.320356e-01, 1.142813e-02, 1.666138e-01, -1.319891e-01, -1.305987e-01, 2.534783e-01, 5.841539e-02, 3.167509e-03, 2.568971e-01, -1.452786e-01, -1.678655e-02, -1.321718e-01, 8.818427e-02, 1.976369e-01, 1.352270e-01, -7.942878e-02, -2.275672e-01, -1.643816e-01, -1.376494e-01, 2.746334e-01, 1.449693e-01, 2.179956e-01, 3.650284e-02, -5.525675e-02, 2.498136e-01, 6.674499e-03, -2.110457e-01, -1.761207e-01, 2.348864e-01, 1.237346e-01, -2.842763e-01, -9.037679e-02, -1.037419e-01, 6.359110e-02, -2.851996e-01, 2.610556e-01, -2.983899e-01, 8.445986e-02, 7.367177e-02, -1.954886e-01, 4.584020e-02, -1.850669e-01, -1.040556e-01, -1.636716e-01, -2.187925e-01, 7.971109e-02, 2.407284e-01, 2.454032e-01, 1.853858e-01, 2.666092e-01, 2.514421e-01, 1.802394e-01, 2.877056e-01, 3.546638e-02, 1.664484e-01, -1.745560e-01, -1.993583e-02, 1.738980e-01, -1.632208e-01, -9.367421e-02, 1.678423e-01, 6.936508e-02, -2.196227e-01, 1.216737e-02, -2.274945e-02, 2.502406e-01, 3.084409e-03, -6.604536e-02, 2.218276e-01, 1.446718e-01, -2.873058e-01, 6.925873e-02, -2.375362e-02, 2.496640e-01, -9.961482e-03, -7.553696e-02, -1.873084e-02, -1.507863e-01, 2.304278e-02, -1.320210e-02, -5.672956e-02, -2.129534e-01, 2.204294e-01, -1.250761e-01, -2.326053e-01, -1.846267e-01, 1.185312e-01, -1.078517e-01, 2.254409e-01, -1.263583e-01, 2.836447e-01, 1.835069e-01, 1.416698e-01, -2.175840e-01, 9.588653e-02, -5.552582e-02, 2.938903e-01, 2.655748e-01, 1.593273e-01, 2.453967e-01, -8.511274e-02, ]).reshape(11, 11, )
__constant_11xf32 = np.array([2.516007e-01, 1.764848e-01, 1.645540e-01, 1.870631e-01, -1.179187e-01, -1.213722e-03, 2.332864e-01, 5.957484e-02, -2.294500e-01, -5.044252e-02, 1.034780e-02, ]).reshape(11, )
 # fmt: on


def forward(
  _arg0 = MemRef('_arg0', 1, 11, input=True),
  _7 = MemRef('_7', 1,output=True)
):
  _0 = GlobalMemRef('__constant_11xf32', __constant_11xf32)
  _1 = GlobalMemRef('__constant_11x11xf32', __constant_11x11xf32)
  _2 = MemRef('_2', 11, 11, )

  @parfor(_arg1=(0, 11, 1), _arg2=(0, 11, 1))
  def body(_arg1, _arg2):
    _8 = _1[_arg1,_arg2,]
    _2[_arg2,_arg1,] = _8


  _3 = MemRef('_3', 1, 11, )

  @parfor(_arg1=(0, 1, 1), _arg2=(0, 11, 1))
  def body(_arg1, _arg2):
    _3[_arg1,_arg2,] = 0.000000


  _4 = MemRef('_4', 1, 11, )
  _4.alias(_3)

  @parfor(_arg1=(0, 1, 1), _arg2=(0, 11, 1))
  def body(_arg1, _arg2):
    for _arg3 in range(0, 11, 1):
      _8 = _arg0[_arg1,_arg3,]
      _9 = _2[_arg3,_arg2,]
      _10 = _4[_arg1,_arg2,]
      _11 = _8 * _9
      _12 = _10 + _11
      _4[_arg1,_arg2,] = _12
    


  _5 = MemRef('_5', 1, 11, )

  @parfor(_arg1=(0, 1, 1), _arg2=(0, 11, 1))
  def body(_arg1, _arg2):
    _8 = _4[0,_arg2,]
    _9 = _0[_arg2,]
    _10 = _8 + _9
    _5[_arg1,_arg2,] = _10


  _6 = MemRef('_6', 1,)
  _6[0,] = 0.000000
  _7.alias(_6)
  for _arg1 in range(0, 1, 1):
    for _arg2 in range(0, 11, 1):
      _8 = _5[_arg1,_arg2,]
      _9 = _7[0,]
      _10 = _8 + _9
      _7[0,] = _10
    
  



if __name__ == "__main__":
    Forward(forward)
